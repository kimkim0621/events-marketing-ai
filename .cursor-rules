# Cursor Rules - イベント集客施策提案AI

## 🎯 プロジェクト概要
イベント集客施策提案AIシステムの開発・保守

## 📋 開発原則

### 1. 最小限の修正原則
- **必要最小限の変更**のみを実装
- **一つずつ問題を解決**し、段階的に実装
- **推測による修正を避ける**

### 2. 検証駆動開発
- **問題の根本原因を特定**してから修正
- **ローカルでの動作確認**を必須とする
- **既存機能への影響を事前評価**

### 3. ドキュメント更新
- **修正内容の記録**を徹底
- **仕様書の更新**を忘れずに
- **今後の参考資料**として保存

## 🚫 避けるべき行動

### 修正時の禁止事項
- ❌ エラーメッセージを詳しく読まずに修正
- ❌ 問題の原因を特定せずに修正
- ❌ 「多分これが原因だろう」での修正
- ❌ 必要以上の大幅な変更
- ❌ 動作している部分の不要な修正
- ❌ 一度に複数の問題を同時に修正

### コーディング時の注意点
- ❌ 修正後の動作確認なし
- ❌ 副作用の検証なし
- ❌ ローカルテストの省略

## ✅ 推奨アプローチ

### 修正手順
1. **問題分析**: エラーログの詳細確認、関連ファイルの現状確認
2. **修正計画**: 最小限の修正方針を決定
3. **実装**: 段階的な修正の実装
4. **検証**: ローカルでの動作確認、副作用チェック
5. **デプロイ**: 本番環境での最終確認

### コード品質
- **可読性**: 明確な変数名、適切なコメント
- **保守性**: モジュール化、関数の単一責任
- **テスト性**: テストしやすい構造

## 🏗️ アーキテクチャ

### ファイル構成
```
streamlit_app.py          # メインアプリケーション
integrated_app.py         # 統合UI（優先版）
data_import_ui.py         # データインポート機能
requirements.txt          # 依存関係
marketing_ai_specifications.md  # 仕様書
development_guidelines.md # 開発ガイドライン
```

### 技術スタック
- **フロントエンド**: Streamlit 1.28.0+
- **バックエンド**: Python 3.9+
- **データベース**: SQLite/Supabase
- **デプロイ**: Streamlit Community Cloud

## 🎨 UI/UX ガイドライン

### デザイン原則
- **シンプルさ**: 不要な機能は削除
- **直感性**: ユーザーが迷わないUI
- **一貫性**: 統一されたデザインシステム

### レイアウト
- **2列レイアウト**: 左列（施策提案）、右列（データインポート）
- **レスポンシブ**: 各種デバイス対応
- **視覚的境界線**: 将来の拡張性を考慮

### カラーパレット
- プライマリ: #1f77b4
- セカンダリ: #2c3e50
- 成功: #28a745
- 警告: #ffc107

## 🔍 デバッグ・トラブルシューティング

### エラー対応手順
1. **エラーメッセージの詳細確認**
2. **ログファイルの確認**
3. **関連ファイルの状態確認**
4. **段階的な原因特定**
5. **最小限の修正実装**

### よくある問題と解決策
- **インポートエラー**: ファイルの存在確認、パスの確認
- **UI崩れ**: CSS/HTMLの構文確認、Streamlitの制約確認
- **データベースエラー**: 接続設定、テーブル構造の確認

## 📊 品質保証

### テスト要件
- **ローカルテスト**: 全機能の動作確認
- **ブラウザテスト**: Chrome、Firefox、Safari
- **レスポンシブテスト**: 各種画面サイズ
- **パフォーマンステスト**: 読み込み速度、メモリ使用量

### 品質指標
- バグ発生率: < 5%
- 修正成功率: > 90%
- デプロイ成功率: > 95%
- ユーザー満足度: > 4.0/5.0

## 🚀 デプロイメント

### デプロイ前チェックリスト
- [ ] ローカルでの動作確認
- [ ] 既存機能への影響確認
- [ ] requirements.txtの更新
- [ ] 仕様書の更新
- [ ] コミットメッセージの明確化

### デプロイ手順
1. **ローカル検証**
2. **Gitコミット・プッシュ**
3. **Streamlit Cloudでの自動デプロイ**
4. **本番環境での動作確認**
5. **問題発生時の即座対応**

## 📝 コーディング規約

### Python
- **PEP 8準拠**: 標準的なPythonコーディング規約
- **型ヒント**: 可能な限り型ヒントを使用
- **docstring**: 関数・クラスの説明を記載

### Streamlit
- **セッション状態管理**: st.session_stateの適切な使用
- **エラーハンドリング**: try-except文の適切な使用
- **パフォーマンス**: @st.cacheの適切な使用

### Git
- **コミットメッセージ**: 明確で具体的な説明
- **ブランチ戦略**: main/developブランチの使い分け
- **プルリクエスト**: レビュー必須

## 🔧 開発環境

### 必要なツール
- Python 3.9+
- Streamlit 1.28.0+
- Git
- VS Code/Cursor
- ブラウザ（Chrome推奨）

### 環境設定
```bash
# 仮想環境作成
python -m venv .venv

# 仮想環境アクティベート
source .venv/bin/activate  # Mac/Linux
.venv\Scripts\activate     # Windows

# 依存関係インストール
pip install -r requirements.txt

# アプリ起動
streamlit run streamlit_app.py
```

## 📚 参考資料

### 公式ドキュメント
- [Streamlit公式ドキュメント](https://docs.streamlit.io/)
- [Python公式ドキュメント](https://docs.python.org/)
- [Pandas公式ドキュメント](https://pandas.pydata.org/)

### プロジェクト固有
- [システム仕様書](./marketing_ai_specifications.md)
- [開発ガイドライン](./development_guidelines.md)
- [API仕様書](./api_specifications.md)

## 🎯 効率的な開発のためのプロンプト例

### 問題報告時
```
【問題報告】
- 現象: 具体的な症状
- エラーメッセージ: 完全なエラーログ
- 期待される動作: 本来の動作
- 環境: ブラウザ、OS、バージョン
- 再現手順: 1. xxx 2. xxx 3. xxx
```

### 修正依頼時
```
【修正依頼】
- 目的: 何を解決したいか
- 現状: 現在の状態
- 要求: 期待される結果
- 制約: 変更してはいけない部分
- 影響範囲: 関連する機能
```

### UI改善依頼時
```
【UI改善依頼】
- 対象画面: 具体的な画面・機能
- 現在の問題: ユーザビリティの問題
- 改善案: 具体的な改善提案
- 参考: 類似サービスの例
- 優先度: 高/中/低
```

## 🔄 継続的改善

### 定期的な見直し
- **月次レビュー**: 開発プロセスの見直し
- **四半期レビュー**: アーキテクチャの見直し
- **年次レビュー**: 技術スタックの見直し

### 学習と成長
- **技術情報の収集**: 新しいStreamlit機能の調査
- **ベストプラクティス**: 他プロジェクトの成功事例
- **失敗事例の分析**: 問題の根本原因と対策

---

**最終更新**: 2025-01-09
**適用範囲**: イベント集客施策提案AIプロジェクト
**責任者**: 開発チーム 